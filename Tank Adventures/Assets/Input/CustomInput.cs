//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3f8faa3f-30af-478c-a90c-b4885adf3edb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ca8f3bfc-3415-48f7-a9be-a6d608d00385"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""8c936985-ffa9-47ce-909e-6dcf6a17c84e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ultimate"",
                    ""type"": ""Button"",
                    ""id"": ""3815a93e-e440-4324-b3ea-fad0ed3afe98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StatsMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b4a1f76c-3e57-4ef0-95b5-c83c4b3f76bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleUpgrade"",
                    ""type"": ""Button"",
                    ""id"": ""33e17af6-dbc0-42db-a0b9-b77a623842ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePlayer"",
                    ""type"": ""Button"",
                    ""id"": ""b0999a48-bb78-436f-b803-fae91f0e6884"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleEndScreen"",
                    ""type"": ""Button"",
                    ""id"": ""44039412-de3a-440f-8be8-e42c5e39bc83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleOthers"",
                    ""type"": ""Button"",
                    ""id"": ""0346322a-9594-4b44-98f3-e32cbf420e30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleStats"",
                    ""type"": ""Button"",
                    ""id"": ""2c4432e4-7f51-4658-a5a8-426e849b8199"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePortal"",
                    ""type"": ""Button"",
                    ""id"": ""75c4353a-6ead-4f44-bede-e81f68547945"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ZQSD"",
                    ""id"": ""ca9aee45-eff7-4be9-b67c-a38a8899477d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75a24677-3a22-44c3-b646-f5eab50cc323"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""090f54ba-5c95-45a9-aef3-e350fecd1d36"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af48304e-26e4-45fd-a96c-3544e5ca382f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d5da8e56-7619-4584-a16f-9e7f1783b533"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""63b0faa0-d448-44d4-b9d4-f02116a57c04"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""65d02b0e-5773-453f-a712-3787240c9eb5"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""45ede8d8-e905-4f61-9cd2-90b173996135"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""06c84ce0-8036-43f3-bc38-9d8b8e856f4d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d78c76c8-dbbf-420e-bf7d-ac2810d1b5a9"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3f80ad43-43cb-4600-be0c-0cc4582a109a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d716d2c5-2b00-4625-b76f-1e49cbe29c8d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d8e35a8-37ab-4f80-804b-da316a224c64"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Ultimate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce4f2afc-6dbb-4697-b18c-df23df1b2ea7"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Ultimate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cff111e4-454c-4a88-90bf-47f9c270b517"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""StatsMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86d7ffeb-6cfb-4c2c-9b1a-9f29be188309"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StatsMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9d9b00a-d588-402d-ac26-6648568d14cc"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleUpgrade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3482b964-2c16-48b4-965a-3ebc9127317b"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac7c41e5-f81f-47d3-ab52-f270a327244b"",
                    ""path"": ""<Keyboard>/f4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleEndScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed861dfa-1deb-4bad-a36e-e6ef5c677c17"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleOthers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91bcd177-c97f-4e0a-852c-a115af0bbcc3"",
                    ""path"": ""<Keyboard>/f6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleStats"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58aa01e2-d4ae-441f-a17d-6fae93edc284"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePortal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Ultimate = m_Player.FindAction("Ultimate", throwIfNotFound: true);
        m_Player_StatsMenu = m_Player.FindAction("StatsMenu", throwIfNotFound: true);
        m_Player_ToggleUpgrade = m_Player.FindAction("ToggleUpgrade", throwIfNotFound: true);
        m_Player_TogglePlayer = m_Player.FindAction("TogglePlayer", throwIfNotFound: true);
        m_Player_ToggleEndScreen = m_Player.FindAction("ToggleEndScreen", throwIfNotFound: true);
        m_Player_ToggleOthers = m_Player.FindAction("ToggleOthers", throwIfNotFound: true);
        m_Player_ToggleStats = m_Player.FindAction("ToggleStats", throwIfNotFound: true);
        m_Player_TogglePortal = m_Player.FindAction("TogglePortal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_Ultimate;
    private readonly InputAction m_Player_StatsMenu;
    private readonly InputAction m_Player_ToggleUpgrade;
    private readonly InputAction m_Player_TogglePlayer;
    private readonly InputAction m_Player_ToggleEndScreen;
    private readonly InputAction m_Player_ToggleOthers;
    private readonly InputAction m_Player_ToggleStats;
    private readonly InputAction m_Player_TogglePortal;
    public struct PlayerActions
    {
        private @CustomInput m_Wrapper;
        public PlayerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @Ultimate => m_Wrapper.m_Player_Ultimate;
        public InputAction @StatsMenu => m_Wrapper.m_Player_StatsMenu;
        public InputAction @ToggleUpgrade => m_Wrapper.m_Player_ToggleUpgrade;
        public InputAction @TogglePlayer => m_Wrapper.m_Player_TogglePlayer;
        public InputAction @ToggleEndScreen => m_Wrapper.m_Player_ToggleEndScreen;
        public InputAction @ToggleOthers => m_Wrapper.m_Player_ToggleOthers;
        public InputAction @ToggleStats => m_Wrapper.m_Player_ToggleStats;
        public InputAction @TogglePortal => m_Wrapper.m_Player_TogglePortal;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Ultimate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUltimate;
                @Ultimate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUltimate;
                @Ultimate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnUltimate;
                @StatsMenu.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStatsMenu;
                @StatsMenu.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStatsMenu;
                @StatsMenu.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStatsMenu;
                @ToggleUpgrade.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleUpgrade;
                @ToggleUpgrade.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleUpgrade;
                @ToggleUpgrade.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleUpgrade;
                @TogglePlayer.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePlayer;
                @TogglePlayer.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePlayer;
                @TogglePlayer.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePlayer;
                @ToggleEndScreen.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleEndScreen;
                @ToggleEndScreen.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleEndScreen;
                @ToggleEndScreen.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleEndScreen;
                @ToggleOthers.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleOthers;
                @ToggleOthers.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleOthers;
                @ToggleOthers.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleOthers;
                @ToggleStats.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleStats;
                @ToggleStats.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleStats;
                @ToggleStats.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleStats;
                @TogglePortal.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePortal;
                @TogglePortal.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePortal;
                @TogglePortal.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePortal;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Ultimate.started += instance.OnUltimate;
                @Ultimate.performed += instance.OnUltimate;
                @Ultimate.canceled += instance.OnUltimate;
                @StatsMenu.started += instance.OnStatsMenu;
                @StatsMenu.performed += instance.OnStatsMenu;
                @StatsMenu.canceled += instance.OnStatsMenu;
                @ToggleUpgrade.started += instance.OnToggleUpgrade;
                @ToggleUpgrade.performed += instance.OnToggleUpgrade;
                @ToggleUpgrade.canceled += instance.OnToggleUpgrade;
                @TogglePlayer.started += instance.OnTogglePlayer;
                @TogglePlayer.performed += instance.OnTogglePlayer;
                @TogglePlayer.canceled += instance.OnTogglePlayer;
                @ToggleEndScreen.started += instance.OnToggleEndScreen;
                @ToggleEndScreen.performed += instance.OnToggleEndScreen;
                @ToggleEndScreen.canceled += instance.OnToggleEndScreen;
                @ToggleOthers.started += instance.OnToggleOthers;
                @ToggleOthers.performed += instance.OnToggleOthers;
                @ToggleOthers.canceled += instance.OnToggleOthers;
                @ToggleStats.started += instance.OnToggleStats;
                @ToggleStats.performed += instance.OnToggleStats;
                @ToggleStats.canceled += instance.OnToggleStats;
                @TogglePortal.started += instance.OnTogglePortal;
                @TogglePortal.performed += instance.OnTogglePortal;
                @TogglePortal.canceled += instance.OnTogglePortal;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnUltimate(InputAction.CallbackContext context);
        void OnStatsMenu(InputAction.CallbackContext context);
        void OnToggleUpgrade(InputAction.CallbackContext context);
        void OnTogglePlayer(InputAction.CallbackContext context);
        void OnToggleEndScreen(InputAction.CallbackContext context);
        void OnToggleOthers(InputAction.CallbackContext context);
        void OnToggleStats(InputAction.CallbackContext context);
        void OnTogglePortal(InputAction.CallbackContext context);
    }
}
